---
import Layout from "../../layouts/Layout.astro"
import PageTitle from "../../components/PageTitle.astro"
import CodeBlock from "../../components/CodeBlock.astro"
import FileName from "../../components/FileName.astro"
import SectionTitle from "../../components/SectionTitle.astro"

const contents = [
    {
        url: 'css-dotted-blur',
        name: 'Dotted Blur'
    },
    {
        url: 'css-text-multi-line-overflow',
        name: 'Text Multi Lines Overflow'
    },
    {
        url: 'css-grid-auto-layout',
        name: 'Grid Auto Layout'
    },
    {
        url: 'css-sticky-hack',
        name: 'Sticky Hack'
    },
]
---

<Layout contents={contents}>
    <PageTitle>Cool CSS</PageTitle>

    <SectionTitle id="css-dotted-blur">Dotted Blur</SectionTitle>
    <CodeBlock code={`{
    background-color: rgb(0,0,0);
    background-image: radial-gradient( rgba(0,0,0,0) 1px,
            rgb(0,0,0) 1px );
    background-size: 4px 4px;
    backdrop-filter: brightness(100%) blur(3px);
}`} lang="css" />

    <SectionTitle id="css-text-multi-line-overflow">Text Multi Lines Overflow</SectionTitle>
    <CodeBlock code={`{
    display: -webkit-box;
    -webkit-line-clamp: 3; /* how many lines */
    -webkit-box-orient: vertical;
    overflow: hidden;
}`} lang="css" />

    <SectionTitle id="css-grid-auto-layout">Grid Auto Layout</SectionTitle>
    <CodeBlock code={`.wrapper {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    grid-gap: 1rem;
}

.wrapper {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    grid-gap: 1rem;
}`} lang="css" />

    <SectionTitle id="css-sticky-hack">Sticky Hack</SectionTitle>
    <p>
        Check out the <a href="/script/sticky-hack">StickyHack</a>
        class for more advanced usage.
    </p>
    <CodeBlock code={`.myElement {
  position: sticky;
  top: -1px;
}

/* styles for when the header is in sticky mode */
.myElement.is-pinned {
  color: red;
} `} lang="css" />
    <CodeBlock code={`const el = document.querySelector(".myElement")
const observer = new IntersectionObserver(
  ([e]) => e.target.classList.toggle("is-pinned", e.intersectionRatio < 1),
  { threshold: [1] }
);

observer.observe(el);`} lang="js" />
</Layout>
