---
import Layout from "../../layouts/Layout.astro"
import CodeBlock from "../../components/CodeBlock.astro"
import PageTitle from "../../components/PageTitle.astro"
import FileName from "../../components/FileName.astro"
import SectionTitle from "../../components/SectionTitle.astro"

const contents = [
    {
        url: 'dynamic-list-example-html',
        name: 'Example HTML'
    },
    {
        url: 'dynamic-list-example-ts',
        name: 'Example TypeScript'
    },
    {
        url: 'dynamic-list-type',
        name: 'WithId'
    },
    {
        url: 'dynamic-list-code',
        name: 'DynamicList'
    }
]
---

<Layout contents={contents}>
    <PageTitle>DynamicList</PageTitle>

    <SectionTitle id="dynamic-list-example-html">Example HTML</SectionTitle>
    <CodeBlock code={`<dynamic-list>
    <template>
        <dynamic-item data-bind-attr="title:name">
            <h4 data-bind-text="name"></h4>
            <div data-bind-attr="data-id:id">
                Email: <span data-bind-text="email"></span> |
                Age: <span data-bind-text="age"></span>
            </div>
            <div data-bind-attr="data-id:color.id" data-bind-text="color.name"></div>
            <div class="actions">
                <button data-button="delete">Delete</button>
                <button data-button="edit">Edit</button>
            </div>
        </dynamic-item>
    </template>
</dynamic-list>`} lang="html" />

    <SectionTitle id="dynamic-list-example-ts">Example TypeScript</SectionTitle>
    <CodeBlock code={`type Item = {
    id: string
    name: string
    age: number
    email: string
    color?: {
        id: string
        name: string
    }
}

const list = document.querySelector<DynamicList<Item>>('dynamic-list')
let dataList: Item[] = [
    {
        id: '1',
        name: 'John Doe',
        age: 30,
        email: 'john@gmail.com',
        color: {
            id: 'one',
            name: 'Red'
        }
    },
    {
        id: '2',
        name: 'Jane Smith',
        age: 25,
        email: 'jane@gmail.com',
        color: {
            id: 'one',
            name: 'Red'
        }
    },
    {
        id: '3',
        name: 'Alice Johnson',
        age: 28,
        email: 'alice@gmail.com',
        color: {
            id: 'two',
            name: 'Blue'
        }
    },
    {
        id: '4',
        name: 'Bob Brown',
        age: 35,
        email: 'bob@gmail.com',
        color: {
            id: 'three',
            name: 'Green'
        }
    }
]
list.list = dataList`} lang="ts" />

    <SectionTitle id="dynamic-list-type">WithId</SectionTitle>
    <FileName file="types.ts" />
    <CodeBlock code={`export type WithId = { id: string } & Record<string, any>`} lang="ts" />

    <SectionTitle id="dynamic-list-code">DynamicList</SectionTitle>
    <FileName file="dynamic-list.ts" />
    <CodeBlock code={`export class DynamicList<T extends WithId> extends HTMLElement {
    private _list: T[] = []
    private template?: HTMLTemplateElement
    private sortable?: SortableDirective

    constructor() {
        super()
    }

    get list() {
        return this._list
    }

    set list(newList: T[]) {
        const oldMap = new Map(this._list.map(item => [item.id, item]))
        const newMap = new Map(newList.map(item => [item.id, item]))

        for (const item of newList) {
            if (oldMap.has(item.id)) {
                this._updateItem(item)
            } else {
                this._createItem(item)
            }
        }

        for (const item of this._list) {
            if (!newMap.has(item.id)) {
                this._removeItem(item.id)
            }
        }

        // Reorder <li> wrappers
        for (let i = 0; i < newList.length; i++) {
            const expectedId = newList[i].id
            const currentLi = this.children[i] as HTMLLIElement
            if (!currentLi || currentLi.dataset.id !== expectedId) {
                const correctLi = this.querySelector(\`li[data-id="\${expectedId}"]\`)
                if (correctLi) {
                    this.insertBefore(correctLi, currentLi || null)
                }
            }
        }

        this._list = [...newList]
    }

    connectedCallback(): void {
        this.setAttribute('role', 'list')
        this.setAttribute('aria-label', 'Dynamic List')
        this.setAttribute('aria-live', 'polite')
        this.setAttribute('aria-relevant', 'additions removals')
        this.setAttribute('aria-atomic', 'true')

        const tmpl = this.querySelector('template')
        if (tmpl && tmpl instanceof HTMLTemplateElement) {
            this.template = tmpl
        }

        for (const item of this._list) {
            this._createItem(item)
        }

        if (!this.sortable) {
            this.sortable = new SortableDirective(this)
        }
    }

    private _createItem(data: T) {
        if (!this.template) return

        const clone = this.template.content.firstElementChild?.cloneNode(true) as DynamicListItem<T>
        if (!clone) return

        const li = document.createElement('li')
        li.setAttribute('role', 'listitem')
        li.setAttribute('data-id', data.id)
        li.appendChild(clone)
        this.appendChild(li)

        this._setItemData(clone, data)
    }

    private _updateItem(data: T) {
        const li = this.querySelector(\`li[data-id="\${data.id}"]\`)
        const elem = li?.firstElementChild as DynamicListItem<T> | null
        if (!elem) return
        this._setItemData(elem, data)
    }

    private _removeItem(id: string) {
        const li = this.querySelector(\`li[data-id="\${id}"]\`)
        li?.remove()
    }

    private _setItemData(elem: DynamicListItem<T>, data: T) {
        if (deepEqual(elem.data, data)) return
        elem.data = data
    }
}

customElements.define('dynamic-list', DynamicList)`} lang="ts" />
</Layout>