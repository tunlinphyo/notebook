---
import Layout from "../../layouts/Layout.astro"
import CodeBlock from "../../components/CodeBlock.astro"
import PageTitle from "../../components/PageTitle.astro"
import FileName from "../../components/FileName.astro"
import SectionTitle from "../../components/SectionTitle.astro"

const contents = [
    {
        url: 'page-dialog-example-html',
        name: 'Example HTML'
    },
    {
        url: 'page-dialog-example-ts',
        name: 'Example TypeScript'
    },
    {
        url: 'page-dialog-code',
        name: 'PageDialog'
    },
    {
        url: 'page-dialog-styles',
        name: 'Styles'
    }
]
---

<Layout contents={contents}>
    <PageTitle>PageDialog</PageTitle>

    <p>
        The PageDialog custom element extends the
        <a href="/html/miniel">MiniEl</a>
        class and creates a dialog element with a swipe-to-close function for mobile web apps.
    </p>

    <SectionTitle id="page-dialog-example-html">Example HTML</SectionTitle>
    <CodeBlock code={`<page-dialog id="categoriesPage">
    <header slot="header">
        <button class="button-close" data-button="close">
            <svg-icon name="back" size="16"></svg-icon>
        </button>
        <h2>Categories</h2>
        <button class="button-action" data-button="action" data-sort="false">
            <svg-icon name="sort" size="16"></svg-icon>
        </button>
    </header>
    <dynamic-list id="categoryList">
        <template>
            <dynamic-item>
                <button data-button="category" data-bind-attr="data-id:id">
                    <div class="icon" data-bind-attr="data-bg-color:color">
                        <category-icon data-bind-attr="name:icon" size="24"></category-icon>
                    </div>
                    <div class="color-name" data-bind-text="name"></div>
                </button>
            </dynamic-item>
        </template>
    </dynamic-list>
    <footer slot="footer" class="page-action">
        <button data-button="add">
            <svg-icon name="plus" size="20"></svg-icon>
        </button>
    </footer>
</page-dialog>`} lang="html" />

    <SectionTitle id="page-dialog-example-ts">Example TypeScript</SectionTitle>
    <CodeBlock code={`const categoriesPage = document.querySelector<PageDialog>('#categoriesPage')

categoriesPage.openPage()
categoriesPage.closePage()

categoriesPage.addEventListener('button-click', (e: Event) => {
    const customEvent = e as CustomEvent
    console.log(customEvent.detail)
})
categoriesPage.addEventListener('opened', () => {
    console.log("opened")
})
categoriesPage.addEventListener('closed', () => {
    console.log("closed")
})`} lang="ts" />

    <SectionTitle id="page-dialog-code">PageDialog</SectionTitle>
    <FileName file="page-dialog.ts" />
    <CodeBlock code={`export class PageDialog extends MiniEl {
    private dialog!: HTMLDialogElement
    private startX: number = Infinity
    private currentX: number = 0
    private isDragging: boolean = false
    private deltaX: number = 0

    static styles = [ hostStyles ]

    constructor() {
        super()

        this.onTouchStart = this.onTouchStart.bind(this)
        this.onTouchMove = this.onTouchMove.bind(this)
        this.onTouchEnd = this.onTouchEnd.bind(this)
        this.onClick = this.onClick.bind(this)
    }

    protected onDisconnect() {
        this.dialog.removeEventListener('touchstart', this.onTouchStart, true)
        this.dialog.removeEventListener('touchmove', this.onTouchMove, true)
        this.dialog.removeEventListener('touchend', this.onTouchEnd)
        this.dialog.removeEventListener('click', this.onClick)
    }

    protected onConnect() {
        this.dialog = this.renderRoot.querySelector('dialog') as HTMLDialogElement

        this.dialog.addEventListener('touchstart', this.onTouchStart, true)
        this.dialog.addEventListener('touchmove', this.onTouchMove, true)
        this.dialog.addEventListener('touchend', this.onTouchEnd)
        this.dialog.addEventListener('click', this.onClick)
    }

    openPage(scrollReset: boolean = false) {
        this.dialog.showModal()
        if (scrollReset) {
            this.dialog.scrollTo(0, 0)
        }
        this.deltaX = 0

        const animation = this.openAnimation()
        animation.finished.then(() => {
            this.dispatchEvent(new CustomEvent("opened"))
        })
    }

    closePage() {
        const animation = this.closeAnimation(this.deltaX)

        animation.finished.then(() => {
            this.dialog.classList.remove("closing")
            this.dialog.close()
            this.dispatchEvent(new CustomEvent("closed"))
        })
    }

    protected render() {
        return html\`
            <dialog>
                <slot name="header"></slot>
                <section>
                    <slot></slot>
                </section>
                <slot name="footer"></slot>
            </dialog>
        \`
    }

    private onClick(event: Event) {
        const target = event.target as HTMLElement
        if (target && target.dataset.button) {
            if (target.dataset.button === 'close') {
                this.deltaX = 0
                history.back()
            } else {
                this.dispatchEvent(new CustomEvent('button-click', { detail: target.dataset }))
            }
        }
    }

    private onTouchStart(event: TouchEvent): void {
        if (event.touches.length !== 1) return

        this.startX = event.touches[0].clientX
        this.currentX = this.startX
        if (this.startX > 40) return

        this.isDragging = true
    }

    private onTouchMove(event: TouchEvent): void {
        if (!this.isDragging) return

        this.currentX = event.touches[0].clientX
        const deltaX = this.currentX - this.startX
        if (deltaX > 0) {
            event.preventDefault()
            this.dialog.style.transform = \`translateX(\${deltaX}px)\`
        }
    }

    private onTouchEnd(): void {
        if (!this.isDragging) return

        const deltaX = this.currentX - this.startX
        this.isDragging = false

        if (deltaX > this.dialog.clientWidth * 0.5) {
            this.deltaX = deltaX
            requestAnimationFrame(() => history.back())
        } else if (deltaX > 1) {
            this.dialog.removeAttribute('style')
            this.openAnimation(deltaX)
        }
    }

    private openAnimation(deltaX: number = 0) {
        return this.dialog.animate([
            { translate: \`\${deltaX || window.innerWidth }px 0\` },
            { translate: '0 0' },
        ], {
            duration: 400,
            easing: 'cubic-bezier(0.61, 1, 0.88, 1)'
        })
    }

    private closeAnimation(deltaX: number = 0) {
        this.dialog.removeAttribute('style')
        this.dialog.classList.add('closing')

        return this.dialog.animate([
            { translate: \`\${deltaX}px 0\` },
            { translate: '100% 0' },
        ], {
            duration: 400,
            easing: 'cubic-bezier(0.61, 1, 0.88, 1)'
        })
    }
}

customElements.define('page-dialog', PageDialog)`} lang="ts" />

    <SectionTitle id="page-dialog-styles">Styles</SectionTitle>
    <FileName file="styles.ts" />
    <CodeBlock code={`const hostStyles = css\`
    * {
        box-sizing: border-box;
    }
    dialog {
        width: 100%;
        max-width: 100%;
        height: 100%;
        max-height: 100%;
        position: fixed;
        inset: 0;
        padding: 0;

        border: none;
        outline: none;
        background-color: var(--bg-color);

        &::backdrop {
            background-color: #3339;
            opacity: 0;
            transition: opacity .4s linear;
        }
        &[open] {
            &::backdrop {
                opacity: 1;
            }
        }
        @starting-style {
            &[open]::backdrop {
                opacity: 0;
            }
        }
        &.closing {
            &::backdrop {
                opacity: 0;
            }
        }
    }
    ::slotted(header) {
        position: sticky;
        top: 0;
        z-index: 5;
        width: 100%;
        height: 60px;
        transform: translateZ(0);
    }
    ::slotted(footer) {
        position: sticky;
        bottom: 0;
        z-index: 5;
    }
    section {
        min-height: calc(100% - 60px - 124px);
        padding: 20px;
    }
    @media (display-mode: fullscreen), (display-mode: standalone) {
        section {
            padding-block-end: 40px;
        }
        ::slotted(footer) {
            padding-block-end: 40px;
        }
    }
\``} lang="ts" />
</Layout>
